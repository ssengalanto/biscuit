// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssengalanto/midt (interfaces: Mediator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	midt "github.com/ssengalanto/midt"
)

// MockMediator is a mock of Mediator interface.
type MockMediator struct {
	ctrl     *gomock.Controller
	recorder *MockMediatorMockRecorder
}

// MockMediatorMockRecorder is the mock recorder for MockMediator.
type MockMediatorMockRecorder struct {
	mock *MockMediator
}

// NewMockMediator creates a new mock instance.
func NewMockMediator(ctrl *gomock.Controller) *MockMediator {
	mock := &MockMediator{ctrl: ctrl}
	mock.recorder = &MockMediatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediator) EXPECT() *MockMediatorMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMediator) Publish(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMediatorMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMediator)(nil).Publish), arg0, arg1)
}

// RegisterNotificationHandler mocks base method.
func (m *MockMediator) RegisterNotificationHandler(arg0 midt.NotificationHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNotificationHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNotificationHandler indicates an expected call of RegisterNotificationHandler.
func (mr *MockMediatorMockRecorder) RegisterNotificationHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNotificationHandler", reflect.TypeOf((*MockMediator)(nil).RegisterNotificationHandler), arg0)
}

// RegisterPipelineBehaviour mocks base method.
func (m *MockMediator) RegisterPipelineBehaviour(arg0 midt.PipelineBehaviour) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPipelineBehaviour", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPipelineBehaviour indicates an expected call of RegisterPipelineBehaviour.
func (mr *MockMediatorMockRecorder) RegisterPipelineBehaviour(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPipelineBehaviour", reflect.TypeOf((*MockMediator)(nil).RegisterPipelineBehaviour), arg0)
}

// RegisterRequestHandler mocks base method.
func (m *MockMediator) RegisterRequestHandler(arg0 midt.RequestHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRequestHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRequestHandler indicates an expected call of RegisterRequestHandler.
func (mr *MockMediatorMockRecorder) RegisterRequestHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRequestHandler", reflect.TypeOf((*MockMediator)(nil).RegisterRequestHandler), arg0)
}

// Send mocks base method.
func (m *MockMediator) Send(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMediatorMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMediator)(nil).Send), arg0, arg1)
}
