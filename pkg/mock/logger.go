// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssengalanto/biscuit/pkg/interfaces (interfaces: Logger)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/ssengalanto/biscuit/pkg/interfaces"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0, arg1)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), arg0, arg1)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0, arg1)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", arg0, arg1)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), arg0, arg1)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0, arg1)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), arg0, arg1)
}

// Panic mocks base method.
func (m *MockLogger) Panic(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", arg0, arg1)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), arg0, arg1)
}

// Warn mocks base method.
func (m *MockLogger) Warn(arg0 string, arg1 interfaces.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0, arg1)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), arg0, arg1)
}
